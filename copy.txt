<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <title>Home</title>
    <style>
      .scrollable {
        max-height: 100px; /* Adjust this value to your needs */
        max-width: 200px; /* Adjust this value to your needs */
        overflow-y: auto;
        overflow-x: auto;
        white-space: nowrap; /* This will prevent the text from wrapping to the next line */
    }
    </style>
  </head>
  <body class="bg-gray-100">
    <nav class="bg-blue-500 p-4">
      <div class="container mx-auto flex justify-between items-center text-white">
        <h1 class="font-bold">TATA STEEL FOUNDATION CONFERENCE PORTAL</h1>        
        {% if user.is_authenticated %}
          <h1 class="ml-auto">Logged in as: {{ user.email }}</h1>
          <a href="{% url 'signout' %}" class="bg-white text-blue-500 py-2 px-4 rounded ml-8">Logout</a>
        {% else %}
          <a href="{% url 'signin' %}" class="bg-white text-blue-500 py-2 px-4 rounded">Login</a>
        {% endif %}
      </div>
    </nav>
    <div class="container mx-auto mt-10">
      {% if user.is_authenticated %}
        <h1 class="text-2xl font-bold mb-4">Events</h1>
        <div class="mb-4 w-32">
          <select id="filter" name="filter" onchange="location = this.value;" class="mt-1 block w-full py-2 px-4 bg-blue-500 text-white rounded shadow focus:outline-none">
            <option value="?filter=all">All events</option>
            <option value="?filter=today">Today's events</option>
            <option value="?filter=past">Past events</option>
            <option value="?filter=upcoming">Upcoming events</option>
          </select>
        </div>
        <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
          <div style="height: 425px; overflow-y: auto;">
            <table class="w-full text-sm text-left text-gray-500">
                <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3">Event</th>
                        <th scope="col" class="px-6 py-3">Start time</th>
                        <th scope="col" class="px-6 py-3">End time</th>
                        <th scope="col" class="px-6 py-3">Location</th>
                        <th scope="col" class="px-6 py-3">Attendees</th>
                        <th scope="col" class="px-6 py-3">Web Link</th>
                    </tr>
                </thead>
                <tbody>
                    {% for event in events %}
                    <tr class="bg-white border-b hover:bg-gray-50">
                        <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap">{{ event.subject }}</th>
                        <td class="px-6 py-4">{{ event.start_time }}</td>
                        <td class="px-6 py-4">{{ event.end_time }}</td>
                        <td class="px-6 py-4">{{ event.location }}</td>
                        <td class="px-6 py-4">
                            <div class="scrollable">
                                {{ event.attendees }}
                            </div>
                        </td>
                        <td class="px-6 py-4"><a href="{{ event.web_link }}" class="text-blue-600 hover:underline">Event Details</a></td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
          </div>
        </div>
      {% else %}        
        {% load static %}
        <img src="{% static 'myapp/logo-one.png' %}" alt="Logo">
        <div class="flex flex-col justify-center items-center min-h-screen">
          <div class="text-center">
              <h2 class="text-3xl font-extrabold text-gray-900">
                  Welcome to the TATA STEEL FOUNDATION CONFERENCE PORTAL
              </h2>
              <p class="mt-2 text-xl text-gray-600">
                  This is your one-stop platform for all event-related information. Log in to gain access to a comprehensive list of events, including today's meetings, past meetings, and future meetings. Join us in fostering collaboration and knowledge sharing within our community. Don't miss out, log in now!
              </p>
          </div>
        </div>
      </div>
      
      
      {% endif %}
    </div>
  </body>
</html>



--------------------------------------------------------------------------------

def home(request):
    context = initialize_context(request)

    # Update the access token
    token = update_token(request)

    if token:
        headers = {
            'Authorization': 'Bearer ' + token,
        }

        # List all events
        response = requests.get(
            graph_url + '/me/events',
            headers=headers,
        )

        # Save the events to the database
        for event in events:
                # Parse the start and end times as naive datetime objects
                start_time_naive = parse_datetime(event['start']['dateTime'])
                end_time_naive = parse_datetime(event['end']['dateTime'])

                # Make the datetime objects aware
                ist = pytz.timezone('Asia/Kolkata')
                start_time = ist.localize(start_time_naive)
                end_time = ist.localize(end_time_naive)
                
                # Get the location, attendees, and description
                location = event['location']['displayName']
                attendees = json.dumps(event['attendees'])  # Convert the attendees list to a JSON string
                description = event['bodyPreview']

                # Get the additional fields
                is_cancelled = event['isCancelled']
                is_online_meeting = event['isOnlineMeeting']
                online_meeting_provider = event['onlineMeetingProvider']
                web_link = event['webLink']

                # Check if the event already exists in the database
                if not Event.objects.filter(event_id=event['id'], subject=event['subject'], start_time=start_time, end_time=end_time).exists():
                    # Create a new Event object
                    Event.objects.create(
                        event_id=event['id'],
                        subject=event['subject'],
                        start_time=start_time,
                        end_time=end_time,
                        location=location,
                        attendees=attendees,
                        description=description,
                        is_cancelled=is_cancelled,
                        is_online_meeting=is_online_meeting,
                        online_meeting_provider=online_meeting_provider,
                        web_link=web_link,
                        # Add any other fields you need
                    )
            events = Event.objects.all().order_by('start_time')

            # Get the current date
            today = timezone.now().date()

            # Filter events based on the current date
            todays_events = Event.objects.filter(start_time__date=today)
            past_events = Event.objects.filter(start_time__date__lt=today)
            upcoming_events = Event.objects.filter(start_time__date__gt=today)

            # Get the filter from the GET parameters
            filter = request.GET.get('filter')

            now = timezone.now()

            # If a filter was provided, filter the events by this filter
            if filter == 'today':
                events = Event.objects.filter(start_time__date=now.date()).order_by('start_time')
            elif filter == 'past':
                events = Event.objects.filter(end_time__lt=now).order_by('-end_time')
            elif filter == 'upcoming':
                events = Event.objects.filter(start_time__gt=now).order_by('start_time')
            else:
                events = Event.objects.all().order_by('start_time')

            # Create a new list to store the modified events
            modified_events = []
            for event in events:
                # Parse attendees JSON into list of dictionaries
                attendees_data = json.loads(event.attendees)
                
                # Extract email addresses from attendees data
                email_addresses = [attendee['emailAddress']['address'] for attendee in attendees_data]
                
                # Modify the event's attendees attribute in-place
                event.attendees = ', '.join(email_addresses)

                # Add the modified event to the new list
                modified_events.append(event)

            # Get the date from the GET parameters
            date = request.GET.get('date')

            # If a date was provided, filter the events by this date
            if date:
                date = datetime.strptime(date, '%Y-%m-%d').date()  # Convert the string to a date object
                events = Event.objects.filter(start_time__date=date)

            context['events'] = modified_events
            context['filter'] = filter

    return render(request, 'myapp/home.html', context)    





    -------------------------------------------



    originalEndTimeZone

    def home(request):
    context = initialize_context(request)

    # Check if the access_token.json file exists
    if os.path.exists('access_token.json'):
        # Load the access token from the JSON file
        with open('access_token.json', 'r') as f:
            token_data = json.load(f)

        # Check if the access token exists
        if 'access_token' in token_data:
            token = token_data['access_token']

            headers = {
                'Authorization': 'Bearer ' + token,
            }

            # List all events
            response = requests.get(
                graph_url + '/me/events',
                headers=headers,
            )

            # Write all events to a JSON file
            events = response.json().get('value', [])
            with open('events.json', 'w') as f:
                json.dump(events, f, indent=4)

           # Save the events to the database
            for event in events:
                # Parse the start and end times as naive datetime objects
                start_time_naive = parse_datetime(event['start']['dateTime'])
                end_time_naive = parse_datetime(event['end']['dateTime'])

                # Make the datetime objects aware
                ist = pytz.timezone('Asia/Kolkata')
                start_time = ist.localize(start_time_naive)
                end_time = ist.localize(end_time_naive)
                
                # Get the location, attendees, and description
                location = event['location']['displayName']
                attendees = json.dumps(event['attendees'])  # Convert the attendees list to a JSON string
                description = event['bodyPreview']

                # Get the additional fields
                is_cancelled = event['isCancelled']
                is_online_meeting = event['isOnlineMeeting']
                online_meeting_provider = event['onlineMeetingProvider']
                web_link = event['webLink']

                # Check if the event already exists in the database
                if not Event.objects.filter(event_id=event['id'], subject=event['subject'], start_time=start_time, end_time=end_time).exists():
                    # Create a new Event object
                    Event.objects.create(
                        event_id=event['id'],
                        subject=event['subject'],
                        start_time=start_time,
                        end_time=end_time,
                        location=location,
                        attendees=attendees,
                        description=description,
                        is_cancelled=is_cancelled,
                        is_online_meeting=is_online_meeting,
                        online_meeting_provider=online_meeting_provider,
                        web_link=web_link,
                        # Add any other fields you need
                    )
            events = Event.objects.all().order_by('start_time')

            # Get the current date
            today = timezone.now().date()

            # Filter events based on the current date
            todays_events = Event.objects.filter(start_time__date=today)
            past_events = Event.objects.filter(start_time__date__lt=today)
            upcoming_events = Event.objects.filter(start_time__date__gt=today)

            # Get the filter from the GET parameters
            filter = request.GET.get('filter')

            now = timezone.now()

            # If a filter was provided, filter the events by this filter
            if filter == 'today':
                events = Event.objects.filter(start_time__date=now.date()).order_by('start_time')
            elif filter == 'past':
                events = Event.objects.filter(end_time__lt=now).order_by('-end_time')
            elif filter == 'upcoming':
                events = Event.objects.filter(start_time__gt=now).order_by('start_time')
            else:
                events = Event.objects.all().order_by('start_time')

            # Create a new list to store the modified events
            modified_events = []
            for event in events:
                # Parse attendees JSON into list of dictionaries
                attendees_data = json.loads(event.attendees)
                
                # Extract email addresses from attendees data
                email_addresses = [attendee['emailAddress']['address'] for attendee in attendees_data]
                
                # Modify the event's attendees attribute in-place
                event.attendees = ', '.join(email_addresses)

                # Add the modified event to the new list
                modified_events.append(event)

            # Get the date from the GET parameters
            date = request.GET.get('date')

            # If a date was provided, filter the events by this date
            if date:
                date = datetime.strptime(date, '%Y-%m-%d').date()  # Convert the string to a date object
                events = Event.objects.filter(start_time__date=date)

            context['events'] = modified_events
            context['filter'] = filter

    return render(request, 'myapp/home.html', context)





      -------------------------------------------




    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <title>Home</title>
</head>
<body class="bg-gray-100">
<nav class="bg-blue-500 p-4">
    <div class="container mx-auto flex justify-between items-center text-white">
        <h1 class="font-bold">TATA STEEL FOUNDATION CONFERENCE PORTAL</h1>
        {% if user.is_authenticated %}
        <h1 class="ml-auto">Logged in as: {{ user.email }}</h1>
        <a href="{% url 'signout' %}" class="bg-white text-blue-500 py-2 px-4 rounded ml-8">Logout</a>
        {% else %}
        <a href="{% url 'signin' %}" class="bg-white text-blue-500 py-2 px-4 rounded">Login</a>
        {% endif %}
    </div>
</nav>
<div class="container mx-auto mt-10">
    {% if user.is_authenticated %}
    <h1 class="text-2xl font-bold mb-4">Events</h1>
    <div class="mb-4 w-64 relative">
        <select id="filter" name="filter" onchange="location = this.value;" class="mt-1 block w-full py-2 px-4 bg-blue-500 text-white rounded hover:bg-blue-700 focus:outline-none focus:shadow-outline appearance-none">
            <option value="?filter=all" {% if filter == 'all' %}selected{% endif %}>All events</option>
            <option value="?filter=today" {% if filter == 'today' %}selected{% endif %}>Today's events</option>
            <option value="?filter=past" {% if filter == 'past' %}selected{% endif %}>Past events</option>
            <option value="?filter=upcoming" {% if filter == 'upcoming' %}selected{% endif %}>Upcoming events</option>
        </select>
        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-white">
            <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M10 12l-6-6h12l-6 6z"/></svg>
        </div>
    </div>
    <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
        <div style="height: 425px; overflow-y: auto;">
            <table class="w-full text-sm text-left text-gray-500">
                <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                <tr>
                    <th scope="col" class="px-6 py-3">Event</th>
                    <th scope="col" class="px-6 py-3">Start time</th>
                    <th scope="col" class="px-6 py-3">End time</th>
                    <th scope="col" class="px-6 py-3">Location</th>
                    <th scope="col" class="px-6 py-3">Organizer & Attendees</th>
                    <th scope="col" class="px-6 py-3">Details</th>
                </tr>
                </thead>
                <tbody>
                {% for event in events %}
                <tr class="bg-white border-b hover:bg-gray-50">
                    <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap">{{ event.subject }}</th>
                    <td class="px-6 py-4">
                      <div class="bg-gradient-to-r from-blue-500 to-blue-700 text-white px-4 py-2 rounded font-mono text-sm shadow-md">
                          {{ event.start_time }}
                      </div>
                  </td>
                    <td class="px-6 py-4">{{ event.end_time }}</td>
                    <td class="px-6 py-4">{{ event.location }}</td>
                    <td class="px-6 py-4">
                        <button type="button" class="px-4 py-2 font-bold text-white bg-blue-500 rounded hover:bg-blue-700 focus:outline-none focus:shadow-outline" onclick="openModal('{{ event.organizer }}', '{{ event.attendees }}')">
                            View
                        </button>
                    </td>
                    <td class="px-6 py-4"><a href="{{ event.web_link }}" class="text-blue-600 hover:underline">Event Details</a></td>
                </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
    {% else %}
    {% load static %}
    <div class="flex flex-col justify-center items-center">
        <div class="bg-white w-3/4 p-6 rounded-lg shadow-lg text-center">
            <img src="{% static 'myapp/logo-one.png' %}" alt="Logo" class="mb-8">
            <h2 class="text-3xl font-extrabold text-gray-900 mb-6">
                Welcome to,
            </h2>
            <h2 class="text-3xl font-extrabold text-gray-900 mb-6">
                TATA STEEL FOUNDATION CONFERENCE PORTAL
            </h2>
            <p class="text-xl text-gray-600">
                This is your one-stop platform for all event-related information. Log in to gain access to a comprehensive list of events, including today's meetings, past meetings, and future meetings. Join us in fostering collaboration and knowledge sharing within our community. Don't miss out, log in now!
            </p>
        </div>
    </div>
    </div>
    {% endif %}
</div>

<!-- Attendees & Organizer Modal -->
<div id="attendeesModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4 relative">
                <!-- Close icon at the top right corner -->
                <span class="absolute top-2 right-4 cursor-pointer text-gray-600 hover:text-gray-800" onclick="closeModal()"><i class="fas fa-times fa-lg"></i></span>
                <div class="sm:flex sm:items-start">
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                        <h2 class="text-xl leading-6 font-medium text-gray-900 mb-2" id="modal-title">
                            Organizer
                        </h2>
                        <div class="mt-2 overflow-y-auto" style="max-height: 9rem;" id="organiserModalBody">
                            <!-- Organizer will be inserted here -->
                        </div>
                        <h3 class="text-lg leading-6 font-medium text-gray-900 mt-4">Attendees</h3>
                        <div class="mt-2 overflow-y-auto" style="max-height: 9rem;" id="attendeesModalBody">
                            <!-- Attendees will be inserted here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal script -->
<script>
  function openModal(organizer, attendees) {
    // Parse organizer string into list
    var organizerList = organizer.split(', ');

    // Initialize an empty string to store the HTML for organizer
    var organizerHTML = '';

    // Loop through each organizer
    for (var i = 0; i < organizerList.length; i++) {
        organizerHTML += '<div style="border: 2px solid #1D4ED8; border-radius: 10px; box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);" class="p-2 mb-2">' + organizerList[i] + '</div>';
    }

    // Insert the HTML string into the organizer modal body
    document.getElementById('organiserModalBody').innerHTML = organizerHTML;

    // Parse attendees string into list
    var attendeesList = attendees.split(', ');

    // Remove the organizer from the attendees list if present
    var index = attendeesList.indexOf(organizer);
    if (index !== -1) {
        attendeesList.splice(index, 1);
    }

    // Initialize an empty string to store the HTML for attendees
    var attendeesHTML = '';

    // Loop through each attendee
    for (var i = 0; i < attendeesList.length; i++) {
        attendeesHTML += '<div style="border: 2px solid #1D4ED8; border-radius: 10px; box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);" class="p-2 mb-2">' + attendeesList[i] + '</div>';
    }

    // Insert the HTML string into the attendees modal body
    document.getElementById('attendeesModalBody').innerHTML = attendeesHTML;

    // Display the modal
    document.getElementById('attendeesModal').classList.remove('hidden');
}

function closeModal() {
    document.getElementById('attendeesModal').classList.add('hidden');
}
</script>
</body>
</html>
